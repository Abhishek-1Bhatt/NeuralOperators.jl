var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NeuralOperators","category":"page"},{"location":"#NeuralOperators","page":"Home","title":"NeuralOperators","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NeuralOperators.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Layers","page":"Home","title":"Layers","text":"","category":"section"},{"location":"#Spectral-convolutional-layer","page":"Home","title":"Spectral convolutional layer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"F(s) = mathcalF  v(x)  \nF(s) = g(F(s)) \nv(x) = mathcalF^-1  F(s) ","category":"page"},{"location":"","page":"Home","title":"Home","text":"where v(x) and v(x) denotes input and output function, mathcalF  cdot , mathcalF^-1  cdot  are Fourier transform, inverse Fourier transform, respectively. Function g is a linear transform for lowering Fouier modes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"SpectralConv","category":"page"},{"location":"#NeuralOperators.SpectralConv","page":"Home","title":"NeuralOperators.SpectralConv","text":"SpectralConv(\n    ch, modes, σ=identity;\n    init=c_glorot_uniform, permuted=false, T=ComplexF32\n)\n\nArguments\n\nch: Input and output channel size, e.g. 64=>64.\nmodes: The Fourier modes to be preserved.\nσ: Activation function.\npermuted: Whether the dim is permuted. If permuted=true, layer accepts   data in the order of (..., ch, batch), otherwise the order is (ch, ..., batch).\n\nExample\n\njulia> SpectralConv(2=>5, (16, ))\nSpectralConv(2 => 5, (16,), σ=identity)\n\njulia> using Flux\n\njulia> SpectralConv(2=>5, (16, ), relu)\nSpectralConv(2 => 5, (16,), σ=relu)\n\njulia> SpectralConv(2=>5, (16, ), relu, permuted=true)\nSpectralConvPerm(2 => 5, (16,), σ=relu)\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"Reference: Fourier Neural Operator for Parametric Partial Differential Equations","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Fourier-operator-layer","page":"Home","title":"Fourier operator layer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"v_t+1(x) = sigma(W v_t(x) + mathcalK  v_t(x)  )","category":"page"},{"location":"","page":"Home","title":"Home","text":"where v_t(x) is the input function for t-th layer and mathcalK  cdot  denotes spectral convolutional layer. Activation function sigma can be arbitrary non-linear function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"FourierOperator","category":"page"},{"location":"#NeuralOperators.FourierOperator","page":"Home","title":"NeuralOperators.FourierOperator","text":"FourierOperator(ch, modes, σ=identity; permuted=false)\n\nArguments\n\nch: Input and output channel size for spectral convolution, e.g. 64=>64.\nmodes: The Fourier modes to be preserved for spectral convolution.\nσ: Activation function.\npermuted: Whether the dim is permuted. If permuted=true, layer accepts   data in the order of (..., ch, batch), otherwise the order is (ch, ..., batch).\n\nExample\n\njulia> FourierOperator(2=>5, (16, ))\nChain(\n  Parallel(\n    +,\n    Dense(2, 5),                        # 15 parameters\n    SpectralConv(2 => 5, (16,), σ=identity),  # 160 parameters\n  ),\n  NeuralOperators.var\"#activation_func#14\"{typeof(identity)}(identity),\n)                   # Total: 3 arrays, 175 parameters, 1.668 KiB.\n\njulia> using Flux\n\njulia> FourierOperator(2=>5, (16, ), relu)\nChain(\n  Parallel(\n    +,\n    Dense(2, 5),                        # 15 parameters\n    SpectralConv(2 => 5, (16,), σ=identity),  # 160 parameters\n  ),\n  NeuralOperators.var\"#activation_func#14\"{typeof(relu)}(NNlib.relu),\n)                   # Total: 3 arrays, 175 parameters, 1.668 KiB.\n\njulia> FourierOperator(2=>5, (16, ), relu, permuted=true)\nChain(\n  Parallel(\n    +,\n    Conv((1,), 2 => 5),                 # 15 parameters\n    SpectralConvPerm(2 => 5, (16,), σ=identity),  # 160 parameters\n  ),\n  NeuralOperators.var\"#activation_func#14\"{typeof(relu)}(NNlib.relu),\n)                   # Total: 3 arrays, 175 parameters, 1.871 KiB.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Reference: Fourier Neural Operator for Parametric Partial Differential Equations","category":"page"}]
}
